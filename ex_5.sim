BEGIN
  EXTERNAL CLASS demos = "/usr/local/share/cim/demos.atr";
  demos BEGIN
  
  REF(RDist) varConnectionTime, conversationTime, nextCall;
  REAL maxConnectionTime, fixedConnectionTime, disconnectionTime, avgVarConnectionTime, avgConversationTime, avgNextCall, simTime;
  
  REAL timeInterrupted, startTime, curTime, i;
 
  Entity CLASS Subscriber;
  BEGIN     
    ref(Timer) timer_;
    
    LOOP:    
    ! PASSIVE STATE ;
    Hold(nextCall.sample);
    ! CREATES TIMER AT NEXTCALL ;
    timer_ :- new Timer("timer", THIS Subscriber);
    timer_.schedule(Time);
    ! CONNECTION PHASE ACTIVITY ;
    Hold(fixedConnectionTime + varConnectionTime.sample);
    ! OutFix(Time, 2, 0);
      IF interrupted = 0 THEN
	 BEGIN
	    timer_.interrupt(1);
	    Hold(conversationTime.sample);
	 END;
      interrupted := 0;
      Hold(disconnectionTime);
      REPEAT;
   END;
  
  Entity CLASS Timer(p_); REF(Subscriber) p_;
  BEGIN
     Hold(maxConnectionTime);
    IF interrupted = 0 THEN 
       BEGIN
	  p_.interrupt(1);
       END;
    interrupted := 0;
  END;  
  
  simTime:= 30*24*60*60; 	! 30 days	;
  simTime:= 24*60*60;
  avgNextCall:= 30*60; 		! 30 minutes	;
  maxConnectionTime:= 15;	! 15 seconds	;
  fixedConnectionTime:= 0.2;	! 200 ms	;
  disconnectionTime:= 0.2;	! 200 ms	;
  avgVarConnectionTime:= 3;	! 3 seconds	;
  avgConversationTime:= 3*60;	! 3 minutes	;

  ! NEED TO INITIALIZE THE DISTRIBUTIONS WITH N.E.D. CLASS ;

  nextCall :- NEW NegExp("next_time", 1/avgNextCall);
  varConnectionTime :- NEW NegExp("var_con_time", 1/avgVarConnectionTime);
  conversationTime :- NEW NegExp("convo_time", 1/avgConversationTime);
  NEW Subscriber("subscriber").schedule(0.0);

  trace;
  Hold(simTime);
  
  END;
END;
